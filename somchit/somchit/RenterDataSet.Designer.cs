//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using somchit.Properties;

#pragma warning disable 1591

namespace somchit {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [Serializable()]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("RenterDataSet")]
    [HelpKeyword("vs.data.DataSet")]
    public partial class RenterDataSet : DataSet {
        
        private RentersDataTable tableRenters;
        
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RenterDataSet() {
            this.BeginInit();
            this.InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected RenterDataSet(SerializationInfo info, StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                CollectionChangeEventHandler schemaChangedHandler1 = new CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Renters"] != null)) {
                    base.Tables.Add(new RentersDataTable(ds.Tables["Renters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public RentersDataTable Renters {
            get {
                return this.tableRenters;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override DataSet Clone() {
            RenterDataSet cln = ((RenterDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                DataSet ds = new DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Renters"] != null)) {
                    base.Tables.Add(new RentersDataTable(ds.Tables["Renters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override XmlSchema GetSchemaSerializable() {
            MemoryStream stream = new MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableRenters = ((RentersDataTable)(base.Tables["Renters"]));
            if ((initTable == true)) {
                if ((this.tableRenters != null)) {
                    this.tableRenters.InitVars();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "RenterDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RenterDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            this.tableRenters = new RentersDataTable();
            base.Tables.Add(this.tableRenters);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRenters() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e) {
            if ((e.Action == CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs) {
            RenterDataSet ds = new RenterDataSet();
            XmlSchemaComplexType type = new XmlSchemaComplexType();
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaAny any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                MemoryStream s1 = new MemoryStream();
                MemoryStream s2 = new MemoryStream();
                try {
                    XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RentersRowChangeEventHandler(object sender, RentersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class RentersDataTable : TypedTableBase<RentersRow> {
            
            private DataColumn columnr_id;
            
            private DataColumn columnr_namelast;
            
            private DataColumn columnr_age;
            
            private DataColumn columnr_sex;
            
            private DataColumn columnr_occu;
            
            private DataColumn columnr_tel;
            
            private DataColumn columnr_pid;
            
            private DataColumn columnr_issuedate;
            
            private DataColumn columnr_expdate;
            
            private DataColumn columnr_issueplace;
            
            private DataColumn columnr_hnumber;
            
            private DataColumn columnr_moo;
            
            private DataColumn columnr_soi;
            
            private DataColumn columnr_road;
            
            private DataColumn columnr_tambon;
            
            private DataColumn columnr_district;
            
            private DataColumn columnr_province;
            
            private DataColumn columnr_postalcode;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RentersDataTable() {
                this.TableName = "Renters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RentersDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected RentersDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_idColumn {
                get {
                    return this.columnr_id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_namelastColumn {
                get {
                    return this.columnr_namelast;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_ageColumn {
                get {
                    return this.columnr_age;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_sexColumn {
                get {
                    return this.columnr_sex;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_occuColumn {
                get {
                    return this.columnr_occu;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_telColumn {
                get {
                    return this.columnr_tel;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_pidColumn {
                get {
                    return this.columnr_pid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_issuedateColumn {
                get {
                    return this.columnr_issuedate;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_expdateColumn {
                get {
                    return this.columnr_expdate;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_issueplaceColumn {
                get {
                    return this.columnr_issueplace;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_hnumberColumn {
                get {
                    return this.columnr_hnumber;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_mooColumn {
                get {
                    return this.columnr_moo;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_soiColumn {
                get {
                    return this.columnr_soi;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_roadColumn {
                get {
                    return this.columnr_road;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_tambonColumn {
                get {
                    return this.columnr_tambon;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_districtColumn {
                get {
                    return this.columnr_district;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_provinceColumn {
                get {
                    return this.columnr_province;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn r_postalcodeColumn {
                get {
                    return this.columnr_postalcode;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RentersRow this[int index] {
                get {
                    return ((RentersRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RentersRowChangeEventHandler RentersRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RentersRowChangeEventHandler RentersRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RentersRowChangeEventHandler RentersRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RentersRowChangeEventHandler RentersRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRentersRow(RentersRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RentersRow AddRentersRow(
                        string r_id, 
                        string r_namelast, 
                        int r_age, 
                        string r_sex, 
                        string r_occu, 
                        int r_tel, 
                        string r_pid, 
                        DateTime r_issuedate, 
                        DateTime r_expdate, 
                        string r_issueplace, 
                        int r_hnumber, 
                        int r_moo, 
                        string r_soi, 
                        string r_road, 
                        string r_tambon, 
                        string r_district, 
                        string r_province, 
                        int r_postalcode) {
                RentersRow rowRentersRow = ((RentersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        r_id,
                        r_namelast,
                        r_age,
                        r_sex,
                        r_occu,
                        r_tel,
                        r_pid,
                        r_issuedate,
                        r_expdate,
                        r_issueplace,
                        r_hnumber,
                        r_moo,
                        r_soi,
                        r_road,
                        r_tambon,
                        r_district,
                        r_province,
                        r_postalcode};
                rowRentersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRentersRow);
                return rowRentersRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RentersRow FindByr_id(string r_id) {
                return ((RentersRow)(this.Rows.Find(new object[] {
                            r_id})));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                RentersDataTable cln = ((RentersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new RentersDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnr_id = base.Columns["r_id"];
                this.columnr_namelast = base.Columns["r_namelast"];
                this.columnr_age = base.Columns["r_age"];
                this.columnr_sex = base.Columns["r_sex"];
                this.columnr_occu = base.Columns["r_occu"];
                this.columnr_tel = base.Columns["r_tel"];
                this.columnr_pid = base.Columns["r_pid"];
                this.columnr_issuedate = base.Columns["r_issuedate"];
                this.columnr_expdate = base.Columns["r_expdate"];
                this.columnr_issueplace = base.Columns["r_issueplace"];
                this.columnr_hnumber = base.Columns["r_hnumber"];
                this.columnr_moo = base.Columns["r_moo"];
                this.columnr_soi = base.Columns["r_soi"];
                this.columnr_road = base.Columns["r_road"];
                this.columnr_tambon = base.Columns["r_tambon"];
                this.columnr_district = base.Columns["r_district"];
                this.columnr_province = base.Columns["r_province"];
                this.columnr_postalcode = base.Columns["r_postalcode"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnr_id = new DataColumn("r_id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_id);
                this.columnr_namelast = new DataColumn("r_namelast", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_namelast);
                this.columnr_age = new DataColumn("r_age", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnr_age);
                this.columnr_sex = new DataColumn("r_sex", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_sex);
                this.columnr_occu = new DataColumn("r_occu", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_occu);
                this.columnr_tel = new DataColumn("r_tel", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnr_tel);
                this.columnr_pid = new DataColumn("r_pid", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_pid);
                this.columnr_issuedate = new DataColumn("r_issuedate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnr_issuedate);
                this.columnr_expdate = new DataColumn("r_expdate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnr_expdate);
                this.columnr_issueplace = new DataColumn("r_issueplace", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_issueplace);
                this.columnr_hnumber = new DataColumn("r_hnumber", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnr_hnumber);
                this.columnr_moo = new DataColumn("r_moo", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnr_moo);
                this.columnr_soi = new DataColumn("r_soi", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_soi);
                this.columnr_road = new DataColumn("r_road", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_road);
                this.columnr_tambon = new DataColumn("r_tambon", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_tambon);
                this.columnr_district = new DataColumn("r_district", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_district);
                this.columnr_province = new DataColumn("r_province", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnr_province);
                this.columnr_postalcode = new DataColumn("r_postalcode", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnr_postalcode);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnr_id}, true));
                this.columnr_id.AllowDBNull = false;
                this.columnr_id.Unique = true;
                this.columnr_id.MaxLength = 255;
                this.columnr_namelast.MaxLength = 536870910;
                this.columnr_sex.MaxLength = 255;
                this.columnr_occu.MaxLength = 255;
                this.columnr_pid.MaxLength = 255;
                this.columnr_issueplace.MaxLength = 255;
                this.columnr_soi.MaxLength = 255;
                this.columnr_road.MaxLength = 255;
                this.columnr_tambon.MaxLength = 255;
                this.columnr_district.MaxLength = 255;
                this.columnr_province.MaxLength = 255;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RentersRow NewRentersRow() {
                return ((RentersRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RentersRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(RentersRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RentersRowChanged != null)) {
                    this.RentersRowChanged(this, new RentersRowChangeEvent(((RentersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RentersRowChanging != null)) {
                    this.RentersRowChanging(this, new RentersRowChangeEvent(((RentersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RentersRowDeleted != null)) {
                    this.RentersRowDeleted(this, new RentersRowChangeEvent(((RentersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RentersRowDeleting != null)) {
                    this.RentersRowDeleting(this, new RentersRowChangeEvent(((RentersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRentersRow(RentersRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                RenterDataSet ds = new RenterDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RentersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RentersRow : DataRow {
            
            private RentersDataTable tableRenters;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RentersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRenters = ((RentersDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_id {
                get {
                    return ((string)(this[this.tableRenters.r_idColumn]));
                }
                set {
                    this[this.tableRenters.r_idColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_namelast {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_namelastColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_namelast\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_namelastColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int r_age {
                get {
                    try {
                        return ((int)(this[this.tableRenters.r_ageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_age\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_ageColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_sex {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_sexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_sex\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_sexColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_occu {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_occuColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_occu\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_occuColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int r_tel {
                get {
                    try {
                        return ((int)(this[this.tableRenters.r_telColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_tel\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_telColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_pid {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_pidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_pid\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_pidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime r_issuedate {
                get {
                    try {
                        return ((DateTime)(this[this.tableRenters.r_issuedateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_issuedate\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_issuedateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime r_expdate {
                get {
                    try {
                        return ((DateTime)(this[this.tableRenters.r_expdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_expdate\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_expdateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_issueplace {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_issueplaceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_issueplace\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_issueplaceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int r_hnumber {
                get {
                    try {
                        return ((int)(this[this.tableRenters.r_hnumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_hnumber\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_hnumberColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int r_moo {
                get {
                    try {
                        return ((int)(this[this.tableRenters.r_mooColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_moo\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_mooColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_soi {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_soiColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_soi\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_soiColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_road {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_roadColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_road\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_roadColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_tambon {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_tambonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_tambon\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_tambonColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_district {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_districtColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_district\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_districtColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string r_province {
                get {
                    try {
                        return ((string)(this[this.tableRenters.r_provinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_province\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_provinceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int r_postalcode {
                get {
                    try {
                        return ((int)(this[this.tableRenters.r_postalcodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'r_postalcode\' in table \'Renters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRenters.r_postalcodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_namelastNull() {
                return this.IsNull(this.tableRenters.r_namelastColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_namelastNull() {
                this[this.tableRenters.r_namelastColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_ageNull() {
                return this.IsNull(this.tableRenters.r_ageColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_ageNull() {
                this[this.tableRenters.r_ageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_sexNull() {
                return this.IsNull(this.tableRenters.r_sexColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_sexNull() {
                this[this.tableRenters.r_sexColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_occuNull() {
                return this.IsNull(this.tableRenters.r_occuColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_occuNull() {
                this[this.tableRenters.r_occuColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_telNull() {
                return this.IsNull(this.tableRenters.r_telColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_telNull() {
                this[this.tableRenters.r_telColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_pidNull() {
                return this.IsNull(this.tableRenters.r_pidColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_pidNull() {
                this[this.tableRenters.r_pidColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_issuedateNull() {
                return this.IsNull(this.tableRenters.r_issuedateColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_issuedateNull() {
                this[this.tableRenters.r_issuedateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_expdateNull() {
                return this.IsNull(this.tableRenters.r_expdateColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_expdateNull() {
                this[this.tableRenters.r_expdateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_issueplaceNull() {
                return this.IsNull(this.tableRenters.r_issueplaceColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_issueplaceNull() {
                this[this.tableRenters.r_issueplaceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_hnumberNull() {
                return this.IsNull(this.tableRenters.r_hnumberColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_hnumberNull() {
                this[this.tableRenters.r_hnumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_mooNull() {
                return this.IsNull(this.tableRenters.r_mooColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_mooNull() {
                this[this.tableRenters.r_mooColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_soiNull() {
                return this.IsNull(this.tableRenters.r_soiColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_soiNull() {
                this[this.tableRenters.r_soiColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_roadNull() {
                return this.IsNull(this.tableRenters.r_roadColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_roadNull() {
                this[this.tableRenters.r_roadColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_tambonNull() {
                return this.IsNull(this.tableRenters.r_tambonColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_tambonNull() {
                this[this.tableRenters.r_tambonColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_districtNull() {
                return this.IsNull(this.tableRenters.r_districtColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_districtNull() {
                this[this.tableRenters.r_districtColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_provinceNull() {
                return this.IsNull(this.tableRenters.r_provinceColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_provinceNull() {
                this[this.tableRenters.r_provinceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isr_postalcodeNull() {
                return this.IsNull(this.tableRenters.r_postalcodeColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setr_postalcodeNull() {
                this[this.tableRenters.r_postalcodeColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RentersRowChangeEvent : EventArgs {
            
            private RentersRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RentersRowChangeEvent(RentersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RentersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace somchit.RenterDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public partial class RentersTableAdapter : Component {
        
        private OleDbDataAdapter _adapter;
        
        private OleDbConnection _connection;
        
        private OleDbTransaction _transaction;
        
        private OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RentersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new OleDbDataAdapter();
            DataTableMapping tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Renters";
            tableMapping.ColumnMappings.Add("r_id", "r_id");
            tableMapping.ColumnMappings.Add("r_namelast", "r_namelast");
            tableMapping.ColumnMappings.Add("r_age", "r_age");
            tableMapping.ColumnMappings.Add("r_sex", "r_sex");
            tableMapping.ColumnMappings.Add("r_occu", "r_occu");
            tableMapping.ColumnMappings.Add("r_tel", "r_tel");
            tableMapping.ColumnMappings.Add("r_pid", "r_pid");
            tableMapping.ColumnMappings.Add("r_issuedate", "r_issuedate");
            tableMapping.ColumnMappings.Add("r_expdate", "r_expdate");
            tableMapping.ColumnMappings.Add("r_issueplace", "r_issueplace");
            tableMapping.ColumnMappings.Add("r_hnumber", "r_hnumber");
            tableMapping.ColumnMappings.Add("r_moo", "r_moo");
            tableMapping.ColumnMappings.Add("r_soi", "r_soi");
            tableMapping.ColumnMappings.Add("r_road", "r_road");
            tableMapping.ColumnMappings.Add("r_tambon", "r_tambon");
            tableMapping.ColumnMappings.Add("r_district", "r_district");
            tableMapping.ColumnMappings.Add("r_province", "r_province");
            tableMapping.ColumnMappings.Add("r_postalcode", "r_postalcode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Renters` WHERE ((`r_id` = ?) AND ((? = 1 AND `r_age` IS NULL) OR (`r_age` = ?)) AND ((? = 1 AND `r_sex` IS NULL) OR (`r_sex` = ?)) AND ((? = 1 AND `r_occu` IS NULL) OR (`r_occu` = ?)) AND ((? = 1 AND `r_tel` IS NULL) OR (`r_tel` = ?)) AND ((? = 1 AND `r_pid` IS NULL) OR (`r_pid` = ?)) AND ((? = 1 AND `r_issuedate` IS NULL) OR (`r_issuedate` = ?)) AND ((? = 1 AND `r_expdate` IS NULL) OR (`r_expdate` = ?)) AND ((? = 1 AND `r_issueplace` IS NULL) OR (`r_issueplace` = ?)) AND ((? = 1 AND `r_hnumber` IS NULL) OR (`r_hnumber` = ?)) AND ((? = 1 AND `r_moo` IS NULL) OR (`r_moo` = ?)) AND ((? = 1 AND `r_soi` IS NULL) OR (`r_soi` = ?)) AND ((? = 1 AND `r_road` IS NULL) OR (`r_road` = ?)) AND ((? = 1 AND `r_tambon` IS NULL) OR (`r_tambon` = ?)) AND ((? = 1 AND `r_district` IS NULL) OR (`r_district` = ?)) AND ((? = 1 AND `r_province` IS NULL) OR (`r_province` = ?)) AND ((? = 1 AND `r_postalcode` IS NULL) OR (`r_postalcode` = ?)))";
            this._adapter.DeleteCommand.CommandType = CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_id", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_id", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_age", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_age", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_age", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_age", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_sex", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_sex", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_sex", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_sex", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_occu", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_occu", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_occu", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_occu", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_tel", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tel", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_tel", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tel", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_pid", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_pid", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_pid", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_pid", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_issuedate", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issuedate", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_issuedate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issuedate", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_expdate", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_expdate", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_expdate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_expdate", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_issueplace", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issueplace", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_issueplace", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issueplace", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_hnumber", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_hnumber", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_hnumber", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_hnumber", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_moo", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_moo", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_moo", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_moo", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_soi", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_soi", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_soi", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_soi", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_road", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_road", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_road", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_road", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_tambon", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tambon", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_tambon", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tambon", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_district", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_district", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_district", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_district", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_province", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_province", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_province", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_province", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_r_postalcode", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_postalcode", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_r_postalcode", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_postalcode", DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `Renters` (`r_id`, `r_namelast`, `r_age`, `r_sex`, `r_occu`, `r_tel`, `r_pid`, `r_issuedate`, `r_expdate`, `r_issueplace`, `r_hnumber`, `r_moo`, `r_soi`, `r_road`, `r_tambon`, `r_district`, `r_province`, `r_postalcode`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_id", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_id", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_namelast", OleDbType.LongVarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_namelast", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_age", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_age", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_sex", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_sex", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_occu", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_occu", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_tel", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tel", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_pid", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_pid", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_issuedate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issuedate", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_expdate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_expdate", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_issueplace", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issueplace", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_hnumber", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_hnumber", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_moo", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_moo", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_soi", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_soi", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_road", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_road", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_tambon", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tambon", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_district", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_district", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_province", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_province", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("r_postalcode", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_postalcode", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Renters` SET `r_id` = ?, `r_namelast` = ?, `r_age` = ?, `r_sex` = ?, `r_occu` = ?, `r_tel` = ?, `r_pid` = ?, `r_issuedate` = ?, `r_expdate` = ?, `r_issueplace` = ?, `r_hnumber` = ?, `r_moo` = ?, `r_soi` = ?, `r_road` = ?, `r_tambon` = ?, `r_district` = ?, `r_province` = ?, `r_postalcode` = ? WHERE ((`r_id` = ?) AND ((? = 1 AND `r_age` IS NULL) OR (`r_age` = ?)) AND ((? = 1 AND `r_sex` IS NULL) OR (`r_sex` = ?)) AND ((? = 1 AND `r_occu` IS NULL) OR (`r_occu` = ?)) AND ((? = 1 AND `r_tel` IS NULL) OR (`r_tel` = ?)) AND ((? = 1 AND `r_pid` IS NULL) OR (`r_pid` = ?)) AND ((? = 1 AND `r_issuedate` IS NULL) OR (`r_issuedate` = ?)) AND ((? = 1 AND `r_expdate` IS NULL) OR (`r_expdate` = ?)) AND ((? = 1 AND `r_issueplace` IS NULL) OR (`r_issueplace` = ?)) AND ((? = 1 AND `r_hnumber` IS NULL) OR (`r_hnumber` = ?)) AND ((? = 1 AND `r_moo` IS NULL) OR (`r_moo` = ?)) AND ((? = 1 AND `r_soi` IS NULL) OR (`r_soi` = ?)) AND ((? = 1 AND `r_road` IS NULL) OR (`r_road` = ?)) AND ((? = 1 AND `r_tambon` IS NULL) OR (`r_tambon` = ?)) AND ((? = 1 AND `r_district` IS NULL) OR (`r_district` = ?)) AND ((? = 1 AND `r_province` IS NULL) OR (`r_province` = ?)) AND ((? = 1 AND `r_postalcode` IS NULL) OR (`r_postalcode` = ?)))";
            this._adapter.UpdateCommand.CommandType = CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_id", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_id", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_namelast", OleDbType.LongVarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_namelast", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_age", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_age", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_sex", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_sex", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_occu", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_occu", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_tel", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tel", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_pid", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_pid", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_issuedate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issuedate", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_expdate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_expdate", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_issueplace", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issueplace", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_hnumber", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_hnumber", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_moo", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_moo", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_soi", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_soi", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_road", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_road", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_tambon", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tambon", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_district", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_district", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_province", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_province", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("r_postalcode", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_postalcode", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_id", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_id", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_age", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_age", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_age", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_age", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_sex", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_sex", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_sex", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_sex", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_occu", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_occu", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_occu", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_occu", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_tel", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tel", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_tel", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tel", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_pid", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_pid", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_pid", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_pid", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_issuedate", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issuedate", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_issuedate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issuedate", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_expdate", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_expdate", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_expdate", OleDbType.Date, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_expdate", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_issueplace", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issueplace", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_issueplace", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_issueplace", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_hnumber", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_hnumber", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_hnumber", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_hnumber", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_moo", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_moo", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_moo", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_moo", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_soi", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_soi", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_soi", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_soi", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_road", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_road", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_road", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_road", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_tambon", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tambon", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_tambon", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_tambon", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_district", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_district", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_district", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_district", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_province", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_province", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_province", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_province", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_r_postalcode", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_postalcode", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_r_postalcode", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "r_postalcode", DataRowVersion.Original, false, null));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new OleDbConnection();
            this._connection.ConnectionString = Settings.Default.somchitConnectionString;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new OleDbCommand[1];
            this._commandCollection[0] = new OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Renters.*\r\nFROM            Renters";
            this._commandCollection[0].CommandType = CommandType.Text;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(RenterDataSet.RentersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual RenterDataSet.RentersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RenterDataSet.RentersDataTable dataTable = new RenterDataSet.RentersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(RenterDataSet.RentersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(RenterDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Renters");
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow) {
            return this.Adapter.Update(new DataRow[] {
                        dataRow});
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_r_id, 
                    Nullable<int> Original_r_age, 
                    string Original_r_sex, 
                    string Original_r_occu, 
                    Nullable<int> Original_r_tel, 
                    string Original_r_pid, 
                    Nullable<DateTime> Original_r_issuedate, 
                    Nullable<DateTime> Original_r_expdate, 
                    string Original_r_issueplace, 
                    Nullable<int> Original_r_hnumber, 
                    Nullable<int> Original_r_moo, 
                    string Original_r_soi, 
                    string Original_r_road, 
                    string Original_r_tambon, 
                    string Original_r_district, 
                    string Original_r_province, 
                    Nullable<int> Original_r_postalcode) {
            if ((Original_r_id == null)) {
                throw new ArgumentNullException("Original_r_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_r_id));
            }
            if ((Original_r_age.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_r_age.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
            }
            if ((Original_r_sex == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_r_sex));
            }
            if ((Original_r_occu == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_r_occu));
            }
            if ((Original_r_tel.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_r_tel.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = DBNull.Value;
            }
            if ((Original_r_pid == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_r_pid));
            }
            if ((Original_r_issuedate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((DateTime)(Original_r_issuedate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = DBNull.Value;
            }
            if ((Original_r_expdate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((DateTime)(Original_r_expdate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = DBNull.Value;
            }
            if ((Original_r_issueplace == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_r_issueplace));
            }
            if ((Original_r_hnumber.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_r_hnumber.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = DBNull.Value;
            }
            if ((Original_r_moo.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_r_moo.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = DBNull.Value;
            }
            if ((Original_r_soi == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_r_soi));
            }
            if ((Original_r_road == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_r_road));
            }
            if ((Original_r_tambon == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_r_tambon));
            }
            if ((Original_r_district == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_r_district));
            }
            if ((Original_r_province == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_r_province));
            }
            if ((Original_r_postalcode.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((int)(Original_r_postalcode.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = DBNull.Value;
            }
            ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string r_id, 
                    string r_namelast, 
                    Nullable<int> r_age, 
                    string r_sex, 
                    string r_occu, 
                    Nullable<int> r_tel, 
                    string r_pid, 
                    Nullable<DateTime> r_issuedate, 
                    Nullable<DateTime> r_expdate, 
                    string r_issueplace, 
                    Nullable<int> r_hnumber, 
                    Nullable<int> r_moo, 
                    string r_soi, 
                    string r_road, 
                    string r_tambon, 
                    string r_district, 
                    string r_province, 
                    Nullable<int> r_postalcode) {
            if ((r_id == null)) {
                throw new ArgumentNullException("r_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(r_id));
            }
            if ((r_namelast == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(r_namelast));
            }
            if ((r_age.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(r_age.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            if ((r_sex == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(r_sex));
            }
            if ((r_occu == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(r_occu));
            }
            if ((r_tel.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(r_tel.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
            }
            if ((r_pid == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(r_pid));
            }
            if ((r_issuedate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((DateTime)(r_issuedate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
            }
            if ((r_expdate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((DateTime)(r_expdate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
            }
            if ((r_issueplace == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(r_issueplace));
            }
            if ((r_hnumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(r_hnumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
            }
            if ((r_moo.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(r_moo.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
            }
            if ((r_soi == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(r_soi));
            }
            if ((r_road == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(r_road));
            }
            if ((r_tambon == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(r_tambon));
            }
            if ((r_district == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(r_district));
            }
            if ((r_province == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(r_province));
            }
            if ((r_postalcode.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(r_postalcode.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = DBNull.Value;
            }
            ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string r_id, 
                    string r_namelast, 
                    Nullable<int> r_age, 
                    string r_sex, 
                    string r_occu, 
                    Nullable<int> r_tel, 
                    string r_pid, 
                    Nullable<DateTime> r_issuedate, 
                    Nullable<DateTime> r_expdate, 
                    string r_issueplace, 
                    Nullable<int> r_hnumber, 
                    Nullable<int> r_moo, 
                    string r_soi, 
                    string r_road, 
                    string r_tambon, 
                    string r_district, 
                    string r_province, 
                    Nullable<int> r_postalcode, 
                    string Original_r_id, 
                    Nullable<int> Original_r_age, 
                    string Original_r_sex, 
                    string Original_r_occu, 
                    Nullable<int> Original_r_tel, 
                    string Original_r_pid, 
                    Nullable<DateTime> Original_r_issuedate, 
                    Nullable<DateTime> Original_r_expdate, 
                    string Original_r_issueplace, 
                    Nullable<int> Original_r_hnumber, 
                    Nullable<int> Original_r_moo, 
                    string Original_r_soi, 
                    string Original_r_road, 
                    string Original_r_tambon, 
                    string Original_r_district, 
                    string Original_r_province, 
                    Nullable<int> Original_r_postalcode) {
            if ((r_id == null)) {
                throw new ArgumentNullException("r_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(r_id));
            }
            if ((r_namelast == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(r_namelast));
            }
            if ((r_age.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(r_age.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            if ((r_sex == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(r_sex));
            }
            if ((r_occu == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(r_occu));
            }
            if ((r_tel.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(r_tel.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
            }
            if ((r_pid == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(r_pid));
            }
            if ((r_issuedate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((DateTime)(r_issuedate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
            }
            if ((r_expdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((DateTime)(r_expdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
            }
            if ((r_issueplace == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(r_issueplace));
            }
            if ((r_hnumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(r_hnumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            if ((r_moo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(r_moo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
            }
            if ((r_soi == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(r_soi));
            }
            if ((r_road == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(r_road));
            }
            if ((r_tambon == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(r_tambon));
            }
            if ((r_district == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(r_district));
            }
            if ((r_province == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(r_province));
            }
            if ((r_postalcode.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(r_postalcode.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = DBNull.Value;
            }
            if ((Original_r_id == null)) {
                throw new ArgumentNullException("Original_r_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_r_id));
            }
            if ((Original_r_age.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_r_age.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
            }
            if ((Original_r_sex == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_r_sex));
            }
            if ((Original_r_occu == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_r_occu));
            }
            if ((Original_r_tel.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_r_tel.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = DBNull.Value;
            }
            if ((Original_r_pid == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_r_pid));
            }
            if ((Original_r_issuedate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((DateTime)(Original_r_issuedate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = DBNull.Value;
            }
            if ((Original_r_expdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((DateTime)(Original_r_expdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = DBNull.Value;
            }
            if ((Original_r_issueplace == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_r_issueplace));
            }
            if ((Original_r_hnumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_r_hnumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = DBNull.Value;
            }
            if ((Original_r_moo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_r_moo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = DBNull.Value;
            }
            if ((Original_r_soi == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_r_soi));
            }
            if ((Original_r_road == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_r_road));
            }
            if ((Original_r_tambon == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_r_tambon));
            }
            if ((Original_r_district == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_r_district));
            }
            if ((Original_r_province == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_r_province));
            }
            if ((Original_r_postalcode.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(Original_r_postalcode.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = DBNull.Value;
            }
            ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string r_namelast, 
                    Nullable<int> r_age, 
                    string r_sex, 
                    string r_occu, 
                    Nullable<int> r_tel, 
                    string r_pid, 
                    Nullable<DateTime> r_issuedate, 
                    Nullable<DateTime> r_expdate, 
                    string r_issueplace, 
                    Nullable<int> r_hnumber, 
                    Nullable<int> r_moo, 
                    string r_soi, 
                    string r_road, 
                    string r_tambon, 
                    string r_district, 
                    string r_province, 
                    Nullable<int> r_postalcode, 
                    string Original_r_id, 
                    Nullable<int> Original_r_age, 
                    string Original_r_sex, 
                    string Original_r_occu, 
                    Nullable<int> Original_r_tel, 
                    string Original_r_pid, 
                    Nullable<DateTime> Original_r_issuedate, 
                    Nullable<DateTime> Original_r_expdate, 
                    string Original_r_issueplace, 
                    Nullable<int> Original_r_hnumber, 
                    Nullable<int> Original_r_moo, 
                    string Original_r_soi, 
                    string Original_r_road, 
                    string Original_r_tambon, 
                    string Original_r_district, 
                    string Original_r_province, 
                    Nullable<int> Original_r_postalcode) {
            return this.Update(Original_r_id, r_namelast, r_age, r_sex, r_occu, r_tel, r_pid, r_issuedate, r_expdate, r_issueplace, r_hnumber, r_moo, r_soi, r_road, r_tambon, r_district, r_province, r_postalcode, Original_r_id, Original_r_age, Original_r_sex, Original_r_occu, Original_r_tel, Original_r_pid, Original_r_issuedate, Original_r_expdate, Original_r_issueplace, Original_r_hnumber, Original_r_moo, Original_r_soi, Original_r_road, Original_r_tambon, Original_r_district, Original_r_province, Original_r_postalcode);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : Component {
        
        private UpdateOrderOption _updateOrder;
        
        private RentersTableAdapter _rentersTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private IDbConnection _connection;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public RentersTableAdapter RentersTableAdapter {
            get {
                return this._rentersTableAdapter;
            }
            set {
                this._rentersTableAdapter = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._rentersTableAdapter != null) 
                            && (this._rentersTableAdapter.Connection != null))) {
                    return this._rentersTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._rentersTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(RenterDataSet dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._rentersTableAdapter != null)) {
                DataRow[] updatedRows = dataSet.Renters.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rentersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(RenterDataSet dataSet, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._rentersTableAdapter != null)) {
                DataRow[] addedRows = dataSet.Renters.Select(null, null, DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rentersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(RenterDataSet dataSet, List<DataRow> allChangedRows) {
            int result = 0;
            if ((this._rentersTableAdapter != null)) {
                DataRow[] deletedRows = dataSet.Renters.Select(null, null, DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rentersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            List<DataRow> realUpdatedRows = new List<DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(RenterDataSet dataSet) {
            if ((dataSet == null)) {
                throw new ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._rentersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rentersTableAdapter.Connection) == false))) {
                throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & ConnectionState.Broken) 
                        == ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            List<DataRow> allChangedRows = new List<DataRow>();
            List<DataRow> allAddedRows = new List<DataRow>();
            List<DataAdapter> adaptersWithAcceptChangesDuringUpdate = new List<DataAdapter>();
            Dictionary<object, IDbConnection> revertConnections = new Dictionary<object, IDbConnection>();
            int result = 0;
            DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._rentersTableAdapter != null)) {
                    revertConnections.Add(this._rentersTableAdapter, this._rentersTableAdapter.Connection);
                    this._rentersTableAdapter.Connection = ((OleDbConnection)(workConnection));
                    this._rentersTableAdapter.Transaction = ((OleDbTransaction)(workTransaction));
                    if (this._rentersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rentersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rentersTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    DataRow[] rows = new DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    DataRow[] rows = new DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        DataRow[] rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._rentersTableAdapter != null)) {
                    this._rentersTableAdapter.Connection = ((OleDbConnection)(revertConnections[this._rentersTableAdapter]));
                    this._rentersTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    DataAdapter[] adapters = new DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst) {
            Array.Sort<DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, IComparer<DataRow> {
            
            private DataRelation _relation;
            
            private int _childFirst;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private DataRow GetRoot(DataRow row, out int distance) {
                Debug.Assert((row != null));
                DataRow root = row;
                distance = 0;

                IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                traversedRows[row] = row;

                DataRow parent = row.GetParentRow(this._relation, DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(DataRow row1, DataRow row2) {
                if (ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                DataRow root2 = this.GetRoot(row2, out distance2);

                if (ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591